"""
Script de verificaci√≥n r√°pida para el sistema de Temas y Colores
Verifica que los nuevos DTOs y m√©todos est√©n correctamente implementados
"""

import sys
import os

# A√±adir el directorio ra√≠z al path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

def test_imports():
    """Verificar que todos los imports funcionen"""
    print("üîç Verificando imports...")
    
    try:
        from src.mi_app_completa_backend.application.dto.interface_config_dto import (
            PartialInterfaceConfigUpdateDTO,
            ThemeUpdateDTO,
            ThemeColorUpdateDTO,
            LogoUpdateDTO,
            BrandingUpdateDTO
        )
        print("‚úÖ DTOs importados correctamente")
        return True
    except ImportError as e:
        print(f"‚ùå Error importando DTOs: {e}")
        return False

def test_dto_validation():
    """Verificar validaci√≥n de DTOs"""
    print("\nüß™ Verificando validaci√≥n de DTOs...")
    
    try:
        from src.mi_app_completa_backend.application.dto.interface_config_dto import (
            ThemeColorUpdateDTO
        )
        
        # Test 1: Color v√°lido
        valid_color = ThemeColorUpdateDTO(
            primary={"500": "#3b82f6", "600": "#2563eb"}
        )
        print("‚úÖ Validaci√≥n de colores v√°lidos funciona")
        
        # Test 2: Color inv√°lido (deber√≠a fallar)
        try:
            invalid_color = ThemeColorUpdateDTO(
                primary={"500": "azul"}  # No es formato hex
            )
            print("‚ö†Ô∏è Validaci√≥n no detect√≥ color inv√°lido")
        except Exception:
            print("‚úÖ Validaci√≥n rechaza colores inv√°lidos")
        
        return True
    except Exception as e:
        print(f"‚ùå Error en validaci√≥n: {e}")
        return False

def test_use_case_methods():
    """Verificar que los m√©todos de use case existan"""
    print("\nüîç Verificando m√©todos de use case...")
    
    try:
        from src.mi_app_completa_backend.application.use_cases.interface_config_use_cases import (
            InterfaceConfigUseCases
        )
        
        # Verificar que el m√©todo existe
        assert hasattr(InterfaceConfigUseCases, 'update_config_partial'), \
            "M√©todo update_config_partial no encontrado"
        print("‚úÖ M√©todo update_config_partial existe")
        
        assert hasattr(InterfaceConfigUseCases, '_apply_partial_updates_to_config'), \
            "M√©todo _apply_partial_updates_to_config no encontrado"
        print("‚úÖ M√©todo _apply_partial_updates_to_config existe")
        
        return True
    except Exception as e:
        print(f"‚ùå Error verificando use cases: {e}")
        return False

def test_dto_structure():
    """Verificar estructura de DTOs"""
    print("\nüìã Verificando estructura de DTOs...")
    
    try:
        from src.mi_app_completa_backend.application.dto.interface_config_dto import (
            PartialInterfaceConfigUpdateDTO
        )
        
        # Crear DTO con datos parciales
        partial_update = PartialInterfaceConfigUpdateDTO(
            theme={
                "colors": {
                    "primary": {"500": "#3b82f6"}
                }
            }
        )
        
        print("‚úÖ PartialInterfaceConfigUpdateDTO funciona con datos parciales")
        
        # Verificar que campos None son aceptados
        partial_update2 = PartialInterfaceConfigUpdateDTO()
        print("‚úÖ PartialInterfaceConfigUpdateDTO acepta todos los campos opcionales")
        
        return True
    except Exception as e:
        print(f"‚ùå Error en estructura de DTOs: {e}")
        return False

def main():
    """Ejecutar todas las verificaciones"""
    print("=" * 60)
    print("üöÄ VERIFICACI√ìN DEL SISTEMA DE TEMAS Y COLORES")
    print("=" * 60)
    
    results = []
    
    results.append(("Imports", test_imports()))
    results.append(("Validaci√≥n DTOs", test_dto_validation()))
    results.append(("M√©todos Use Case", test_use_case_methods()))
    results.append(("Estructura DTOs", test_dto_structure()))
    
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE RESULTADOS")
    print("=" * 60)
    
    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status}: {name}")
    
    all_passed = all(result for _, result in results)
    
    if all_passed:
        print("\nüéâ ¬°TODAS LAS VERIFICACIONES PASARON!")
        print("‚úÖ El backend est√° listo para usar")
    else:
        print("\n‚ö†Ô∏è Algunas verificaciones fallaron")
        print("‚ùå Revisar errores arriba")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
